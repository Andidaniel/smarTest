@page "/teacher/users"
@using AutoMapper
@using MongoDB.Bson
@using SmarTest.Components.Common
@using SmarTest.DataLayer.Models;
@using SmarTest.Services.Interfaces

@inject IUserService UserService
@inject IStudentClassService StudentClassService
@inject IMapper Mapper


<h3>Users</h3>

@if (users == null)
{
    <p>Loading...</p>
}
else
{
    <button class="btn btn-primary" @onclick="ShowAddUserForm">Add User</button>

    <table class="table mt-3">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Username</th>
                <th>Role</th>
                <th>Class</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.Username</td>
                    <td>@(user.IsTeacher ? "Teacher" : "Student")</td>
                    <td>@(user.StudentClass != null ? $"{user.StudentClass.Number} - {user.StudentClass.Subclass}" : "Not set")</td>
                    <td>
                        <button class="btn btn-warning me-2" @onclick="() => ShowEditUserForm(user)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmDeleteUser(user)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Modal Dialog -->
@if (isEditing)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@modalTitle</h5>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CancelEdit"></button>
                </div>
               
                    <EditForm Model="@currentUser" OnValidSubmit="SaveUserAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                         <div class="modal-body">
                            <div>
                                <label>First Name:</label>
                                <InputText @bind-Value="currentUser.FirstName" class="form-control" />
                                <ValidationMessage For="@(() => currentUser.FirstName)" />
                            </div>
                            <div>
                                <label>Last Name:</label>
                                <InputText @bind-Value="currentUser.LastName" class="form-control" />
                                <ValidationMessage For="@(() => currentUser.LastName)" />
                            </div>
                            <div>
                                <label>Username:</label>
                                <InputText @bind-Value="currentUser.Username" class="form-control" />
                                <ValidationMessage For="@(() => currentUser.Username)" />
                            </div>
                            <div>
                                <label>Role:</label>
                                <InputCheckbox @bind-Value="currentUser.IsTeacher" /> Is Teacher
                            </div>
                            <div>
                                <label>Class:</label>
                                <select class="form-control" id="classDropdown" @bind="SelectedClassId">
                                    <option value="">Select a class</option>
                                    @foreach (var studentClass in studentClasses)
                                    {
                                        <option value="@studentClass._id.ToString()">
                                            @($"{studentClass.Number} - {studentClass.Subclass}")
                                        </option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success">Save</button>
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>


    <div class="modal-backdrop fade show"></div>
}

@if (isDeleting)
{
    <DeleteConfirmationDialog Title="Delete User"
                              Message="Are you sure you want to delete this user?"
                              ItemDetails="@($"{deleteUser?.FirstName} {deleteUser?.LastName}")"
                              OnConfirm="DeleteUserAsync"
                              OnCancel="CancelDelete" />
}

@code {
    private List<User> users = new();
    private List<StudentClass> studentClasses = new();
    private string SelectedClassId { get; set; } = string.Empty;
    private User currentUser = new User();
    private User? deleteUser = null;
    private bool isDeleting = false;
    private bool isEditing = false;
    private string modalTitle = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAllUsers();
        studentClasses = await StudentClassService.GetAllStudentClassesAsync();
    }

    private void ShowAddUserForm()
    {
        currentUser = new User();
        modalTitle = "Add User";
        isEditing = true;
    }

    private void ShowEditUserForm(User user)
    {
        currentUser = new User
            {
                _id = user._id,
                FirstName = user.FirstName,
                LastName = user.LastName,
                Username = user.Username,
                IsTeacher = user.IsTeacher,
                StudentClass = user.StudentClass,
                StudentClassId = user.StudentClassId
            };
        SelectedClassId = currentUser.StudentClassId.ToString() ?? string.Empty;
        modalTitle = "Edit User";
        isEditing = true;
    }

    private async Task SaveUserAsync()
    {
        if (!string.IsNullOrEmpty(SelectedClassId))
        {
            var selectedClass = studentClasses.FirstOrDefault(c => c._id.ToString() == SelectedClassId);
            if (selectedClass != null)
            {
                currentUser.StudentClassId = selectedClass._id; 
                currentUser.StudentClass = Mapper.Map<StudentClassWithoutId>(selectedClass);  
            }
        }

        if (currentUser._id == ObjectId.Empty)
        {
            await UserService.AddUserAsync(currentUser);
        }
        else
        {
            await UserService.EditUserAsync(currentUser);
        }

        isEditing = false;
        users = await UserService.GetAllUsers();
    }

    private void CancelEdit()
    {
        isEditing = false;
    }

    private void ConfirmDeleteUser(User user)
    {
        deleteUser = user;
        isDeleting = true;
    }

    private async Task DeleteUserAsync()
    {
        if (deleteUser != null)
        {
            await UserService.DeleteUserAsync(deleteUser._id);
        }

        isDeleting = false;
        deleteUser = null;
        users = await UserService.GetAllUsers();
    }

    private void CancelDelete()
    {
        isDeleting = false;
        deleteUser = null;
    }
}
